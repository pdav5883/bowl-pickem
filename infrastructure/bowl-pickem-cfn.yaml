Parameters:
  AcmSSLCertificateId:
    Type: String
  SsmAdminSecretId:
    Type: String
  HostedZoneId:
    Type: String
  DeployedRootURL:
    Type: String
  LambdaReadWritePermissionName:
    Type: String
  LambdaReadPermissionName:
    Type: String
  LambdaAdminPermissionName:
    Type: String
  PublicBucketName:
    Type: String
  PrivateBucketName:
    Type: String
  LambdaBowlsUpdatePicksName:
    Type: String
  LambdaBowlsGetScoreboardName:
    Type: String
  LambdaBowlsAdminEditName:
    Type: String
  LambdaBowlsAdminAuthName:
    Type: String
  LambdaBowlsUpdateMarginsName:
    Type: String
  ApiName:
    Type: String
  PrimaryRouteName:
    Type: String
  AdminRouteName:
    Type: String
Outputs:
  CloudFrontDistroId:
    Value: !Ref CloudFrontDistroBowls
  ApiId:
    Value: !Ref ApiGatewayBowls
Resources:
############################
#### Lambda 
############################
  LambdaBowlsUpdatePicks:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaBowlsUpdatePicksName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Role: !GetAtt RoleBowlsReadWrite.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBowlsLambdaUpdatePicks 
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBowlsGetScoreboard:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaBowlsGetScoreboardName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Role: !GetAtt RoleBowlsRead.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBowlsLambdaGetScoreboard
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBowlsAdminEdit:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaBowlsAdminEditName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Role: !GetAtt RoleBowlsAdmin.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBowlsLambdaAdminEdit
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBowlsAdminAuth:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaBowlsAdminAuthName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Role: !GetAtt RoleBowlsAdmin.Arn 
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBowlsLambdaAdminAuth
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  LambdaBowlsUpdateMargins:
    Type: "AWS::Lambda::Function"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !Ref LambdaBowlsUpdateMarginsName
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 3
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          def lambda_handler(event, context):
                # upload code via lambda deploy script
                return False
      Layers:
      - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python312:15
      Role: !GetAtt RoleBowlsReadWrite.Arn
      FileSystemConfigs: []
      Runtime: "python3.12"
      PackageType: "Zip"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: !Ref LogBowlsLambdaUpdateMargins
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
############################
#### IAM 
############################
  RoleBowlsReadWrite:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - !GetAtt PolicyBowlsReadWrite.PolicyArn
      MaxSessionDuration: 3600
      RoleName: !Sub "role-lambda-${LambdaReadWritePermissionName}"
      Description: "Allows Lambda functions to call read/write bowl pickem s3"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  RoleBowlsRead:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - !GetAtt PolicyBowlsRead.PolicyArn
      MaxSessionDuration: 3600
      RoleName: !Sub "role-lambda-${LambdaReadPermissionName}"
      Description: "Allows Lambda functions to call read bowl pickem s3"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  RoleBowlsAdmin:
    Type: "AWS::IAM::Role"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Path: "/"
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - !GetAtt PolicyBowlsAdmin.PolicyArn
      - !GetAtt PolicyBowlsReadWrite.PolicyArn
      MaxSessionDuration: 3600
      RoleName: !Sub "role-lambda-${LambdaAdminPermissionName}"
      Description: "Allows admin function to read ssm secret, read/write s3, and invoke lambdas"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  PolicyBowlsReadWrite:
    Type: "AWS::IAM::ManagedPolicy"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "policy-lambda-${LambdaReadWritePermissionName}"
      Path: "/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !GetAtt S3BowlsPublic.Arn
          - !GetAtt S3BowlsPrivate.Arn
          - !Sub "${S3BowlsPublic.Arn}/*"
          - !Sub "${S3BowlsPrivate.Arn}/*"
          Action:
          - "s3:PutObject"
          - "s3:GetObject"
          - "s3:ListBucket"
          Effect: "Allow"
          Sid: "VisualEditor0"
  PolicyBowlsRead:
    Type: "AWS::IAM::ManagedPolicy"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "policy-lambda-${LambdaReadPermissionName}"
      Path: "/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource:
          - !GetAtt S3BowlsPublic.Arn
          - !GetAtt S3BowlsPrivate.Arn
          - !Sub "${S3BowlsPublic.Arn}/*"
          - !Sub "${S3BowlsPrivate.Arn}/*"
          Action:
          - "s3:GetObject"
          - "s3:ListBucket"
          Effect: "Allow"
          Sid: "VisualEditor0"
  PolicyBowlsAdmin:
    Type: "AWS::IAM::ManagedPolicy"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ManagedPolicyName: !Sub "policy-lambda-${LambdaAdminPermissionName}"
      Path: "/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SsmAdminSecretId}"
            Action: "ssm:GetParameter"
            Effect: "Allow"
            Sid: "VisualEditor0"
          - Resource: !GetAtt LambdaBowlsUpdateMargins.Arn
            Action: "lambda:InvokeFunction"
            Effect: "Allow"
            Sid: "VisualEditor1"
############################
#### S3 
############################
  S3BowlsPublic:
    Type: "AWS::S3::Bucket"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: !Ref PublicBucketName 
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: false
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
  S3BowlsPrivate:
    Type: "AWS::S3::Bucket"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Delete"
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        BlockPublicAcls: true
      BucketName: !Ref PrivateBucketName
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: false
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
############################
#### API 
############################
  ApiGatewayBowls:
    Type: "AWS::ApiGatewayV2::Api"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Name: !Ref ApiName
      RouteSelectionExpression: "$request.method $request.path"
      DisableExecuteApiEndpoint: false
      CorsConfiguration:
        MaxAge: 1
        AllowOrigins:
        - "*"
        AllowCredentials: false
        ExposeHeaders: []
        AllowMethods:
        - "*"
        AllowHeaders:
        - "*"
      ProtocolType: "HTTP"
      Tags: {}
  ApiStageBowls:
    Type: "AWS::ApiGatewayV2::Stage"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      StageName: "$default"
      AutoDeploy: true
  ApiRouteBowlsGetScoreboard:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      RouteKey: !Sub "GET /${PrimaryRouteName}"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBowlsGetScoreboard]]
  ApiRouteBowlsUpdatePicks:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      RouteKey: !Sub "POST /${PrimaryRouteName}"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBowlsUpdatePicks]]
  ApiRouteBowlsPickemOptions:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      RouteKey: !Sub "OPTIONS /${PrimaryRouteName}"
  ApiRouteBowlsAdminEdit:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      RouteKey: !Sub "POST /${AdminRouteName}"
      Target: !Join ["/", ["integrations", !Ref ApiIntegrationBowlsAdminEdit]]
      AuthorizationType: "CUSTOM"
      AuthorizerId: !Ref ApiAuthorizerBowlsAdminAuth
  ApiRouteBowlsAdminOptions:
    Type: "AWS::ApiGatewayV2::Route"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      RouteKey: !Sub "OPTIONS /${AdminRouteName}"
  ApiIntegrationBowlsGetScoreboard:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBowlsGetScoreboard.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiIntegrationBowlsUpdatePicks:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBowlsUpdatePicks.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiIntegrationBowlsAdminEdit:
    Type: "AWS::ApiGatewayV2::Integration"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBowlsAdminEdit.Arn}/invocations"
      PayloadFormatVersion: "2.0"
  ApiAuthorizerBowlsAdminAuth:
    Type: "AWS::ApiGatewayV2::Authorizer"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      ApiId: !Ref ApiGatewayBowls
      Name: !Ref LambdaBowlsAdminAuth
      AuthorizerType: "REQUEST"
      AuthorizerUri: !Sub  "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBowlsAdminAuth.Arn}/invocations"
      AuthorizerPayloadFormatVersion: "2.0"
      EnableSimpleResponses: true
      IdentitySource: 
      - "$request.header.Authorization"
  ApiTriggerPermissionBowlsGetScoreboard:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBowlsGetScoreboard.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBowls}/*/*/${PrimaryRouteName}"
      Principal: "apigateway.amazonaws.com"
  ApiTriggerPermissionBowlsUpdatePicks:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBowlsUpdatePicks.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBowls}/*/*/${PrimaryRouteName}"
      Principal: "apigateway.amazonaws.com"
  ApiTriggerPermissionBowlsAdminEdit:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBowlsAdminEdit.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBowls}/*/*/${AdminRouteName}"
      Principal: "apigateway.amazonaws.com"
  ApiTriggerPermissionBowlsAdminAuth:
    Type: "AWS::Lambda::Permission"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      FunctionName: !GetAtt LambdaBowlsAdminAuth.Arn
      Action: "lambda:InvokeFunction"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayBowls}/authorizers/${ApiAuthorizerBowlsAdminAuth}"
      Principal: "apigateway.amazonaws.com"
############################
#### CloudFront 
############################
  CloudFrontDistroBowls:
    Type: "AWS::CloudFront::Distribution"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      DistributionConfig:
        DefaultRootObject: "index.html"
        Origins:
        - OriginAccessControlId: !Ref CloudFrontOACBowls
          DomainName: !GetAtt S3BowlsPublic.RegionalDomainName
          S3OriginConfig:
            OriginAccessIdentity: ""
          Id: !GetAtt S3BowlsPublic.RegionalDomainName
        ViewerCertificate:
          MinimumProtocolVersion: "TLSv1.2_2021"
          SslSupportMethod: "sni-only"
          AcmCertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${AcmSSLCertificateId}"
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
          - "HEAD"
          - "GET"
          CachedMethods:
          - "HEAD"
          - "GET"
          TargetOriginId: !GetAtt S3BowlsPublic.RegionalDomainName 
          ViewerProtocolPolicy: "redirect-to-https"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
        Staging: false
        Enabled: true
        Aliases:
        - !Ref DeployedRootURL 
        IPV6Enabled: true
        HttpVersion: "http2"
  CloudFrontOACBowls:
    Type: "AWS::CloudFront::OriginAccessControl"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      OriginAccessControlConfig:
        SigningBehavior: "always"
        Description: ""
        SigningProtocol: "sigv4"
        OriginAccessControlOriginType: "s3"
        Name: !GetAtt S3BowlsPublic.RegionalDomainName
  S3BucketPolicyBowls:
    Type: "AWS::S3::BucketPolicy"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Retain"
    Properties:
      Bucket: !Ref S3BowlsPublic
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
        - Condition:
            StringEquals:
              AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistroBowls.Id}" 
          Resource: !Sub "${S3BowlsPublic.Arn}/*"
          Action: "s3:GetObject"
          Effect: "Allow"
          Principal:
            Service: "cloudfront.amazonaws.com"
          Sid: "AllowCloudFrontServicePrincipal"
        Id: "PolicyForCloudFrontPrivateContent"
############################
#### Route53 
############################
  Route53ARecordBowls:
    Type: "AWS::Route53::RecordSet"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Type: "A"
      Name: !Ref DeployedRootURL
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistroBowls.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2"
  Route53AAAARecordBowls:
    Type: "AWS::Route53::RecordSet"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      Type: "AAAA"
      Name: !Ref DeployedRootURL 
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistroBowls.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2"
############################
#### Logs 
############################
  LogBowlsLambdaGetScoreboard:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaBowlsGetScoreboardName}"
      RetentionInDays: 7
  LogBowlsLambdaUpdatePicks:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaBowlsUpdatePicksName}"
      RetentionInDays: 7
  LogBowlsLambdaAdminEdit:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaBowlsAdminEditName}"
      RetentionInDays: 7
  LogBowlsLambdaAdminAuth:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaBowlsAdminAuthName}"
      RetentionInDays: 7
  LogBowlsLambdaUpdateMargins:
    Type: "AWS::Logs::LogGroup"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaBowlsUpdateMarginsName}"
      RetentionInDays: 7
